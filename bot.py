import os
import logging
import tempfile
import re
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    filters,
    ContextTypes,
    Defaults
)
import yt_dlp

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
load_dotenv()
TOKEN = "8019112289:AAFP3XXD4t2LRUU32C3h7LML3V0tP_yts4s"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ URL YouTube (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã)
def is_youtube_url(url: str) -> bool:
    youtube_regex = (
        r'(https?://)?(www\.)?'
        '(youtube|youtu|youtube-nocookie)\.(com|be)/'
        '(watch\?v=|embed/|v/|.+\?v=)?([^&=%\?]{11})'
    )
    return re.match(youtube_regex, url) is not None

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã –±–µ–∑ ffmpeg)
FORMATS = {
    "1080p": {
        'format': 'bestvideo[height<=1080][ext=mp4]+bestaudio/best[height<=1080][ext=mp4]',
    },
    "720p": {
        'format': 'bestvideo[height<=720][ext=mp4]+bestaudio/best[height<=720][ext=mp4]',
    },
    "audio": {
        'format': 'bestaudio/best',
        'extract_audio': True,
        'postprocessors': [{
            'key': 'FFmpegExtractAudio',
            'preferredcodec': 'mp3',
        }]
    }
}

BASE_OPTIONS = {
    'outtmpl': '%(title)s.%(ext)s',
    'quiet': True,
    'no_warnings': True,
    'restrictfilenames': True,
    'noplaylist': True,
    'retries': 3,
    'socket_timeout': 30,
    'http_chunk_size': 10485760,
}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    keyboard = [
        [InlineKeyboardButton("–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å", callback_data="help")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "üé¨ YouTube Downloader Bot\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ YouTube –≤–∏–¥–µ–æ, –∏ —è —Å–∫–∞—á–∞—é –µ–≥–æ –¥–ª—è –≤–∞—Å.\n"
        "–ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Å—ã–ª–∫–∏ –≤—ã —Å–º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç.",
        reply_markup=reply_markup
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    
    text = (
        "üìö –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:\n\n"
        "1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É —Å—Å—ã–ª–∫—É –Ω–∞ YouTube –≤–∏–¥–µ–æ\n"
        "2. –í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç (1080p, 720p –∏–ª–∏ –∞—É–¥–∏–æ)\n"
        "3. –î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏\n\n"
        "‚ö†Ô∏è –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:\n"
        "- –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ FFmpeg –¥–ª—è –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏\n"
        "(—Å–∫–∞—á–∞—Ç—å: https://ffmpeg.org/download.html)"
    )
    
    if query.message:
        await query.edit_message_text(text)
    else:
        await update.message.reply_text(text)

async def handle_url(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    url = update.message.text.strip()
    
    if not is_youtube_url(url):
        await update.message.reply_text("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É YouTube")
        return
    
    context.user_data['url'] = url
    
    keyboard = [
        [
            InlineKeyboardButton("1080p", callback_data="format_1080p"),
            InlineKeyboardButton("720p", callback_data="format_720p"),
        ],
        [InlineKeyboardButton("MP3 –ê—É–¥–∏–æ", callback_data="format_audio")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "üõ† –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:",
        reply_markup=reply_markup
    )

async def download_video(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    
    url = context.user_data.get('url')
    if not url:
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: —Å—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    format_key = query.data.replace("format_", "")
    format_options = FORMATS.get(format_key, FORMATS["720p"])
    
    await query.edit_message_text(f"‚è≥ –ù–∞—á–∏–Ω–∞—é –∑–∞–≥—Ä—É–∑–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ {format_key}...")
    
    with tempfile.TemporaryDirectory() as temp_dir:
        try:
            ydl_opts = {**BASE_OPTIONS, **format_options}
            ydl_opts['outtmpl'] = os.path.join(temp_dir, '%(title)s.%(ext)s')
            
            # –û—Ç–∫–ª—é—á–∞–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Ç–æ–∫–æ–≤ –µ—Å–ª–∏ ffmpeg –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
            if format_key != "audio":
                ydl_opts['format'] = 'best[height<=1080][ext=mp4]' if format_key == "1080p" else 'best[height<=720][ext=mp4]'
                if 'postprocessors' in ydl_opts:
                    del ydl_opts['postprocessors']
            
            with yt_dlp.YoutubeDL(ydl_opts) as ydl:
                info = ydl.extract_info(url, download=True)
                filename = ydl.prepare_filename(info)
                
                filesize = os.path.getsize(filename) / (1024 * 1024)  # –≤ MB
                if filesize > 50:
                    await query.edit_message_text(
                        f"‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π ({filesize:.1f}MB > 50MB)\n"
                        "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –±–æ–ª–µ–µ –Ω–∏–∑–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ."
                    )
                    return
                
                caption = f"{info.get('title', 'Video')}"
                if format_key != "audio":
                    caption += f" | {info.get('height', '?')}p"
                
                with open(filename, 'rb') as media_file:
                    if format_key == "audio":
                        await context.bot.send_audio(
                            chat_id=query.message.chat_id,
                            audio=media_file,
                            caption=caption,
                            title=info.get('title', 'Audio'),
                            performer=info.get('uploader', 'Unknown'),
                            duration=info.get('duration')
                        )
                    else:
                        await context.bot.send_video(
                            chat_id=query.message.chat_id,
                            video=media_file,
                            caption=caption,
                            duration=info.get('duration'),
                            width=info.get('width'),
                            height=info.get('height'),
                            supports_streaming=True
                        )
                
                await query.delete_message()
                await context.bot.send_message(
                    chat_id=query.message.chat_id,
                    text="‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!"
                )
                
        except yt_dlp.utils.DownloadError as e:
            logger.error(f"Download error: {str(e)}")
            error_msg = str(e)
            if "ffmpeg" in error_msg:
                error_msg += "\n\n–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ FFmpeg –¥–ª—è –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏:\nhttps://ffmpeg.org/download.html"
            await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ: {error_msg}")
        except Exception as e:
            logger.error(f"Unexpected error: {str(e)}")
            await query.edit_message_text(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")

def main():
    app = Application.builder().token(TOKEN).build()
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(help_command, pattern="^help$"))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_url))
    app.add_handler(CallbackQueryHandler(download_video, pattern="^format_"))
    
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π...")
    app.run_polling()

if __name__ == "__main__":
    main()
